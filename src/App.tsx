// import { useState } from 'react';
import './App.css'
// import ResultsBarChart from './components/resultsBarChart';
// import UnitForm from './components/unitForm/UnitForm';
// import Header from './components/header';
// type WoundTallies = Record<number, number>;


function App() {
  // const [simData, setSimData] = useState<WoundTallies>()
  // const [openAside, setOpenAside] = useState<boolean>(false)

  return (
    <div id='main'>

      <section className="login-section">
        <div className='logo-wrapper'>
          {/* <img src="src/assets/Mathhammer.svg" alt="Mathhammer Logo" /> */}
          <div className='logo'>
            <svg xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" viewBox="0 0 187.5 187.499992" preserveAspectRatio="xMidYMid meet" version="1.0"><defs><clipPath id="9583692625"><path d="M 13 6 L 184.570312 6 L 184.570312 186 L 13 186 Z M 13 6 " clip-rule="nonzero" /></clipPath><clipPath id="c0a111dd9e"><path d="M 2.804688 1 L 174 1 L 174 181 L 2.804688 181 Z M 2.804688 1 " clip-rule="nonzero" /></clipPath></defs><path fill="#ffecd1" d="M 0 0 L 187 0 L 187 187 L 0 187 Z M 0 0 " fill-opacity="1" fill-rule="nonzero" /><path fill="#ffecd1" d="M 0 0 L 187 0 L 187 187 L 0 187 Z M 0 0 " fill-opacity="1" fill-rule="nonzero" /><path fill="#a6a6a6" d="M 139.46875 53.382812 L 136.839844 55.738281 C 132.167969 59.925781 131.777344 67.109375 135.964844 71.785156 L 138.046875 74.101562 C 142.238281 78.777344 149.421875 79.167969 154.09375 74.976562 L 156.71875 72.625 C 161.390625 68.433594 161.78125 61.25 157.59375 56.578125 L 155.515625 54.257812 C 151.324219 49.585938 144.140625 49.195312 139.46875 53.382812 Z M 139.46875 53.382812 " fill-opacity="1" fill-rule="nonzero" /><g clip-path="url(#9583692625)"><path fill="#a6a6a6" d="M 180.871094 130.175781 C 176.109375 124.863281 167.941406 124.414062 162.628906 129.179688 L 161.355469 130.320312 L 155.964844 124.160156 L 177.773438 104.605469 C 180.933594 101.769531 182.546875 97.851562 182.546875 93.914062 C 182.546875 90.5 181.335938 87.074219 178.878906 84.332031 C 173.585938 78.429688 164.507812 77.9375 158.605469 83.226562 L 107.386719 129.148438 L 102.304688 123.34375 L 131.28125 97.359375 C 134.445312 94.523438 136.058594 90.605469 136.058594 86.667969 C 136.058594 83.253906 134.847656 79.828125 132.390625 77.089844 C 127.375 71.496094 118.96875 70.757812 113.074219 75.195312 L 105.363281 66.390625 L 144.597656 31.210938 C 147.761719 28.375 149.371094 24.453125 149.371094 20.515625 C 149.371094 17.105469 148.160156 13.679688 145.699219 10.933594 C 140.40625 5.03125 131.332031 4.539062 125.429688 9.828125 L 63.941406 64.957031 L 57.964844 58.136719 L 84.339844 34.488281 C 88.175781 31.046875 88.496094 25.148438 85.058594 21.3125 L 81.226562 17.035156 C 77.78125 13.195312 71.886719 12.875 68.046875 16.316406 L 25.625 54.355469 C 21.789062 57.796875 21.46875 63.695312 24.90625 67.535156 L 28.738281 71.808594 C 32.179688 75.648438 38.078125 75.96875 41.917969 72.527344 L 46.207031 68.679688 L 52.183594 75.503906 L 30.289062 95.132812 C 27.128906 97.964844 25.515625 101.886719 25.515625 105.824219 C 25.515625 109.238281 26.730469 112.664062 29.1875 115.40625 C 34.480469 121.308594 43.554688 121.804688 49.457031 116.511719 L 93.597656 76.9375 L 101.277344 85.699219 L 18.046875 160.320312 C 14.886719 163.15625 13.273438 167.078125 13.273438 171.015625 C 13.273438 174.429688 14.484375 177.855469 16.941406 180.59375 C 22.238281 186.496094 31.3125 186.992188 37.214844 181.699219 L 90.542969 133.882812 L 95.628906 139.691406 L 85.988281 148.332031 C 82.828125 151.171875 81.214844 155.089844 81.214844 159.027344 C 81.214844 162.441406 82.425781 165.867188 84.882812 168.609375 C 90.175781 174.511719 99.253906 175.003906 105.15625 169.710938 L 144.203125 134.703125 L 149.59375 140.863281 L 135.585938 153.425781 C 132.738281 155.976562 131.289062 159.503906 131.289062 163.050781 C 131.289062 166.121094 132.375 169.207031 134.589844 171.671875 C 139.351562 176.984375 147.519531 177.429688 152.832031 172.667969 L 179.878906 148.417969 C 182.726562 145.867188 184.171875 142.339844 184.171875 138.792969 C 184.171875 135.726562 183.085938 132.640625 180.871094 130.175781 Z M 180.871094 130.175781 " fill-opacity="1" fill-rule="nonzero" /></g><path fill="#78290f" d="M 129.023438 48.847656 L 126.394531 51.203125 C 121.722656 55.390625 121.332031 62.574219 125.519531 67.25 L 127.601562 69.570312 C 131.792969 74.242188 138.976562 74.632812 143.648438 70.441406 L 146.273438 68.089844 C 150.945312 63.898438 151.335938 56.714844 147.148438 52.042969 L 145.070312 49.722656 C 140.878906 45.046875 133.695312 44.65625 129.023438 48.847656 Z M 129.023438 48.847656 " fill-opacity="1" fill-rule="nonzero" /><g clip-path="url(#c0a111dd9e)"><path fill="#78290f" d="M 170.425781 125.640625 C 165.664062 120.328125 157.496094 119.878906 152.183594 124.644531 L 150.910156 125.785156 L 145.519531 119.625 L 167.328125 100.070312 C 170.488281 97.234375 172.101562 93.316406 172.101562 89.378906 C 172.101562 85.964844 170.890625 82.539062 168.433594 79.796875 C 163.140625 73.894531 154.0625 73.402344 148.160156 78.691406 L 96.941406 124.609375 L 91.859375 118.804688 L 120.835938 92.824219 C 124 89.984375 125.613281 86.066406 125.613281 82.128906 C 125.613281 78.714844 124.402344 75.289062 121.945312 72.550781 C 116.929688 66.957031 108.523438 66.21875 102.628906 70.65625 L 94.917969 61.851562 L 134.148438 26.671875 C 137.3125 23.839844 138.921875 19.917969 138.921875 15.980469 C 138.921875 12.566406 137.710938 9.140625 135.253906 6.398438 C 129.957031 0.496094 120.882812 0 114.980469 5.292969 L 53.496094 60.421875 L 47.519531 53.597656 L 73.894531 29.949219 C 77.730469 26.511719 78.050781 20.609375 74.613281 16.773438 L 70.78125 12.496094 C 67.335938 8.660156 61.441406 8.339844 57.601562 11.777344 L 15.175781 49.820312 C 11.339844 53.261719 11.019531 59.15625 14.457031 62.996094 L 18.292969 67.273438 C 21.734375 71.109375 27.628906 71.429688 31.46875 67.992188 L 35.757812 64.140625 L 41.734375 70.964844 L 19.839844 90.59375 C 16.679688 93.429688 15.070312 97.347656 15.070312 101.285156 C 15.070312 104.699219 16.28125 108.125 18.738281 110.867188 C 24.03125 116.769531 33.105469 117.265625 39.007812 111.976562 L 83.148438 72.398438 L 90.828125 81.164062 L 7.601562 155.785156 C 4.4375 158.621094 2.824219 162.542969 2.824219 166.480469 C 2.824219 169.890625 4.039062 173.316406 6.496094 176.058594 C 11.789062 181.960938 20.863281 182.457031 26.765625 177.160156 L 80.097656 129.347656 L 85.183594 135.15625 L 75.542969 143.796875 C 72.382812 146.636719 70.769531 150.554688 70.769531 154.492188 C 70.769531 157.90625 71.980469 161.332031 74.4375 164.074219 C 79.730469 169.976562 88.808594 170.46875 94.710938 165.175781 L 133.757812 130.167969 L 139.148438 136.328125 L 125.136719 148.894531 C 122.289062 151.445312 120.84375 154.972656 120.84375 158.519531 C 120.84375 161.589844 121.929688 164.671875 124.144531 167.136719 C 128.90625 172.453125 137.074219 172.898438 142.386719 168.132812 L 169.429688 143.886719 C 172.277344 141.335938 173.726562 137.808594 173.726562 134.261719 C 173.726562 131.1875 172.640625 128.105469 170.425781 125.640625 Z M 170.425781 125.640625 " fill-opacity="1" fill-rule="nonzero" /></g></svg>          </div>
          <h2>Table Top Calculator</h2>
          <span>Make more informed choices</span>
        </div>
        <form>
          <button>Login</button>
          <button>Sign Up</button>
          <button>Guest</button>
        </form>


        {/* <form>
          <label htmlFor="username">Username:</label>
          <input type="text" id="username" name="username" />
          <label htmlFor="password">Password:</label>
          <input type="password" id="password" name="password" />
          <button type="submit">Login</button>
        </form> */}
      </section>
      {/* <Header openAside={openAside} setOpenAside={setOpenAside} />
      <div id="main">
        {openAside ? <aside>aside</aside> : null}
        <article>
          <UnitForm setSimData={setSimData} />
          {simData ?
            <ResultsBarChart results={simData} />
            : null
          }
        </article>

      </div>
      <footer>Footer</footer> */}
    </div>
  )
}

export default App



/*
right now I have run simulation feeding directly into state that is named sim resulst 
- I dont like this as I am using findDistribution to massage the data first before the state is set
  the naming isnt cohesive in this case and I would prefer to have run sim to just return a value and 
  for me to then use the distribution function after that and set state from there. 
  also the data I am returning from run sim is dubious at best, pretty sure its just
  a matrix and could be boiled down to just an array of the would results

*/